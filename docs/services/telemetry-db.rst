Telemetry Database Service
==========================

KubOS utilizes a `SQLite database <https://www.sqlite.org/about.html>`__ to store telemetry data generated by the
hardware and payload services until it is requested for transmission by the ground station.

SQLite only allows one process to make changes to a database at a time, so the telemetry database service acts as a 
single point of contact for interacting with the underlying telemetry database.

Interface Details
-----------------

Specific details about the available GraphQL queries can be found in the |telem-db| Rust docs.

 .. |telem-db| raw:: html
 
    <a href="../rust-docs/telemetry_service/index.html" target="_blank">telemetry database service</a>
    
Benchmark
~~~~~~~~~

When run from within the SDK, we have gathered the following benchmark statistics:

- Building and sending UDP requests takes 10-11 microseconds.
- Round-trip GraphQL transacations take 1.8-2.1 milliseconds.
    
Querying the Service
--------------------

The ``telemetry`` query can be used to fetch a certain selection of data from the telemetry database.
It will return an array of database entries.

The query has the following schema::

    query {
        telemetry(timestampGe: Integer, timestampLe: Integer, subsystem: String, parameter: String): [{
            timestamp: Integer!
            subsystem: String!
            parameter: String!
            value: String!
        }]
    }
    
Each of the query arguments acts as a filter for the database query:

    - timestampGe - Return entries with timestamps occurring on or after the given value
    - timestampLe - Return entries with timestamps occurring on or before the given value
    - subsystem - Return entries which match the given subsystem name
    - parameter - Return entries which match the given parameter name
    
Note: ``timestampGe`` and ``timestampLe`` can be combined to create a timestamp selection range.
For example, entries with timestamps after ``1000``, but before ``5000``.

Adding Entries to the Database
------------------------------

The ``insert`` query can be used to add an entry to the telemetry database.

It has the following schema::

    mutation {
        insert(timestamp: Integer, subsystem: String!, parameter: String!, value: String!): {
            success: Boolean!,
            errors: String!
        }
    }
    
The ``timestamp`` argument is optional. If it is not specified, one will be generated based on the current system time.

Adding Entries to the Database Asynchronously
---------------------------------------------

If you would like to add many entries to the database quickly, and don't care about verifying that the request
was successful, the service's direct UDP port may be used.
This UDP port is configured with the ``direct_port`` value in the system's ``config.toml`` file.

Insert requests should be sent as individual UDP messages in JSON format.

The requests have the following schema::

    {
        "timestamp": Integer,
        "subsystem": String!,
        "parameter": String!,
        "value": String!,
    }
    
`timestamp` is optional (one will be generated based on the current system time), but the other parameters are all required.

For example::

    {
        "subsystem": "eps",
        "parameter": "voltage",
        "value": "3.5"
    }
    
Limitations
~~~~~~~~~~~

The entry submission rate should be limited to no more than 256 entries every half second.

This is calculated based on the average entry processing time of 2 milliseconds and the UDP socket receive buffer size of
256 full-sized packets (if the packets are smaller than the maximum size of 4096 bytes, then the entries may be sent at a faster rate).

.. note::

    The default receive buffer size is determined by the kernel constant ``SK_RMEM_MAX``. This value may be updated using
    the ``SO_RCVBUF`` socket option. 