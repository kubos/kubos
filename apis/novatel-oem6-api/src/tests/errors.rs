//
// Copyright (C) 2018 Kubos Corporation
//
// Licensed under the Apache License, Version 2.0 (the "License")
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
// http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

use super::*;
use messages::ReceiverStatusFlags;

#[test]
fn test_request_errors() {
    let mut mock = MockStream::default();

    mock.write.set_input(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x1, 0x0, 0x0, 0xC0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x5E, 0x0, 0x0,
        0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0xB7, 0xAF, 0xFE, 0x9B,
    ]);

    mock.read.set_output(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x1, 0x0, 0x80, 0x20, 0x6, 0x0, 0x0, 0x0, 0xFF, 0x78, 0xD1, 0xB,
        0x6, 0x67, 0xC9, 0x9, 0x0, 0x0, 0x0, 0x0, 0xFB, 0xFD, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x4F,
        0x4B, 0x10, 0x9D, 0x33, 0xB1,
    ]);

    let oem = mock_new!(mock);

    assert_eq!(oem.request_errors(false), Ok(()));
}

#[test]
fn test_request_errors_hold() {
    let mut mock = MockStream::default();

    mock.write.set_input(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x1, 0x0, 0x0, 0xC0, 0x20, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x20, 0x0, 0x0, 0x0, 0x5E, 0x0, 0x0,
        0x0, 0x1, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0, 0x0,
        0x0, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0xD2, 0xC8, 0x42, 0x23,
    ]);

    mock.read.set_output(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x1, 0x0, 0x80, 0x20, 0x6, 0x0, 0x0, 0x0, 0xFF, 0x78, 0xD1, 0xB,
        0x6, 0x67, 0xC9, 0x9, 0x0, 0x0, 0x0, 0x0, 0xFB, 0xFD, 0x0, 0x0, 0x1, 0x0, 0x0, 0x0, 0x4F,
        0x4B, 0x10, 0x9D, 0x33, 0xB1,
    ]);

    let oem = mock_new!(mock);

    assert_eq!(oem.request_errors(true), Ok(()));
}

#[test]
fn test_get_error() {
    let mut mock = MockStream::default();

    mock.read.set_output(vec![
        0xAA, 0x44, 0x12, 0x1C, 0x5E, 0x00, 0x00, 0x20, 0x2C, 0x00, 0x00, 0x00, 0x34, 0x82, 0xAE,
        0xB0, 0x56, 0x18, 0x00, 0x00, 0x48, 0x00, 0x67, 0xB9, 0x00, 0x00, 0xC0, 0x07, 0x01, 0x00,
        0x00, 0x00, 0x13, 0x00, 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x4E, 0x6F, 0x20, 0x56, 0x61,
        0x6C, 0x69, 0x64, 0x20, 0x50, 0x6F, 0x73, 0x69, 0x74, 0x69, 0x6F, 0x6E, 0x20, 0x43, 0x61,
        0x6C, 0x63, 0x75, 0x6C, 0x61, 0x74, 0x65, 0x64, 0x00, 0x00, 0x00, 0x00, 0x01, 0x5C, 0xD2,
        0xDB,
    ]);

    let oem = mock_new!(mock);

    let expected: Log = Log::RxStatusEvent(RxStatusEventLog {
        recv_status: ReceiverStatusFlags::ANTENNA_NOT_POWERED
            | ReceiverStatusFlags::ANTENNA_SHORTENED
            | ReceiverStatusFlags::INS_RESET
            | ReceiverStatusFlags::GPS_ALMANAC_INVALID
            | ReceiverStatusFlags::CLOCK_STEERING_DISABLED
            | ReceiverStatusFlags::CLOCK_MODEL_INVALID
            | ReceiverStatusFlags::SOFTWARE_RESOURCE_WARNING
            | ReceiverStatusFlags::AUX3_STATUS_EVENT
            | ReceiverStatusFlags::AUX1_STATUS_EVENT,
        time_status: 130,
        week: 45230,
        ms: 6230,
        word: 1,
        bit: 19,
        event: 1,
        description: "No Valid Position Calculated".to_owned(),
    });

    assert_eq!(oem.get_log().unwrap(), expected);
}
